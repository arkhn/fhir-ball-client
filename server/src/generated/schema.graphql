### This file was autogenerated by GraphQL Nexus
### Do not make changes to this file directly


type Attribute {
  comments: String
  createdAt: DateTime!
  id: ID!
  inputs(after: ID, before: ID, first: Int, last: Int, skip: Int): [Input!]!
  mergingScript: String
  path: String!
  resource: Resource
  updatedAt: DateTime!
}

input AttributeFilter {
  every: AttributeWhereInput
  none: AttributeWhereInput
  some: AttributeWhereInput
}

input AttributeWhereInput {
  AND: [AttributeWhereInput!]
  comments: NullableStringFilter
  createdAt: DateTimeFilter
  id: StringFilter
  inputs: InputFilter
  mergingScript: NullableStringFilter
  NOT: [AttributeWhereInput!]
  OR: [AttributeWhereInput!]
  path: StringFilter
  resource: ResourceWhereInput
  updatedAt: DateTimeFilter
}

type AuthPayload {
  token: String!
  user: User!
}

input BooleanFilter {
  equals: Boolean
  not: Boolean
}

type Column {
  column: String
  createdAt: DateTime!
  id: ID!
  joins(after: ID, before: ID, first: Int, last: Int, skip: Int): [Join!]!
  owner: String
  table: String
  updatedAt: DateTime!
}

input ColumnFilter {
  every: ColumnWhereInput
  none: ColumnWhereInput
  some: ColumnWhereInput
}

input ColumnInput {
  column: String!
  joins: [JoinInput!]
  owner: String!
  table: String!
}

input ColumnInputWithoutJoins {
  column: String
  owner: String
  table: String
}

input ColumnWhereInput {
  AND: [ColumnWhereInput!]
  column: NullableStringFilter
  createdAt: DateTimeFilter
  id: StringFilter
  inputs: InputFilter
  join: JoinWhereInput
  joins: JoinFilter
  NOT: [ColumnWhereInput!]
  OR: [ColumnWhereInput!]
  owner: NullableStringFilter
  table: NullableStringFilter
  updatedAt: DateTimeFilter
}

type Credential {
  createdAt: DateTime!
  database: String!
  host: String!
  id: ID!
  login: String!
  model: DatabaseType!
  password: String!
  port: String!
  source: Source!
  updatedAt: DateTime!
}

input CredentialWhereInput {
  AND: [CredentialWhereInput!]
  createdAt: DateTimeFilter
  database: StringFilter
  host: StringFilter
  id: StringFilter
  login: StringFilter
  model: DatabaseType
  NOT: [CredentialWhereInput!]
  OR: [CredentialWhereInput!]
  password: StringFilter
  port: StringFilter
  source: SourceWhereInput
  updatedAt: DateTimeFilter
}

enum DatabaseType {
  POSTGRES
}

scalar DateTime

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: DateTime
  notIn: [DateTime!]
}

enum FhirDerivation {
  constraint
  specialization
}

type Input {
  attribute: Attribute!
  createdAt: DateTime!
  id: ID!
  script: String
  sqlValue: Column
  staticValue: String
  updatedAt: DateTime!
}

input InputFilter {
  every: InputWhereInput
  none: InputWhereInput
  some: InputWhereInput
}

input InputWhereInput {
  AND: [InputWhereInput!]
  attribute: AttributeWhereInput
  createdAt: DateTimeFilter
  id: StringFilter
  NOT: [InputWhereInput!]
  OR: [InputWhereInput!]
  script: NullableStringFilter
  sqlValue: ColumnWhereInput
  staticValue: NullableStringFilter
  updatedAt: DateTimeFilter
}

type Join {
  createdAt: DateTime!
  id: ID!
  tables(after: ID, before: ID, first: Int, last: Int, skip: Int): [Column!]!
  updatedAt: DateTime!
}

input JoinFilter {
  every: JoinWhereInput
  none: JoinWhereInput
  some: JoinWhereInput
}

input JoinInput {
  source: ColumnInputWithoutJoins
  target: ColumnInputWithoutJoins
}

input JoinWhereInput {
  AND: [JoinWhereInput!]
  column: ColumnWhereInput
  createdAt: DateTimeFilter
  id: StringFilter
  NOT: [JoinWhereInput!]
  OR: [JoinWhereInput!]
  tables: ColumnFilter
  updatedAt: DateTimeFilter
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type Mutation {
  addJoinToColumn(columnId: ID!, join: JoinInput): Column!
  createAttribute(path: String!, resourceId: ID!): Attribute!
  createInput(attributeId: ID!, script: String, sql: ColumnInput, static: String): Input!
  createResource(definitionId: String!, sourceId: ID!): Resource!
  createSource(hasOwner: Boolean!, mapping: String, name: String!, templateName: String!): Source!
  createStructureDefinition(
    """The content of the StructureDefinition as a JSON string"""
    definition: String!
  ): StructureDefinition!
  createTemplate(name: String!): Template!
  deleteAttribute(id: ID!): Attribute!
  deleteCredential(id: ID!): Credential!
  deleteInput(id: ID!): Input!
  deleteJoin(id: ID!): Join!
  deleteResource(id: ID!): Resource!
  deleteSource(id: ID!): Source!
  deleteStructureDefinition(id: ID!): StructureDefinition!
  deleteTemplate(id: ID!): Template!
  login(email: String!, password: String!): AuthPayload!
  signup(email: String!, name: String!, password: String!): AuthPayload!
  updateAttribute(attributeId: ID!, data: UpdateAttributeInput!): Attribute!
  updateInput(data: UpdateInputInput!, inputId: ID!): Input!
  updateJoin(data: JoinInput!, joinId: ID!): Join!
  updateResource(data: UpdateResourceInput!, resourceId: ID!): Resource!
  updateStructureDefinition(
    """The content of the StructureDefinition as a JSON string"""
    definition: String!
    id: ID!
  ): StructureDefinition!
  upsertCredential(database: String!, host: String!, login: String!, model: String!, password: String!, port: String!, sourceId: ID!): Credential!
}

input NullableStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: String
  notIn: [String!]
  startsWith: String
}

type Query {
  attribute(attributeId: ID!): Attribute
  availableResources: [String!]!
  me: User
  resource(resourceId: ID!): Resource
  source(sourceId: ID!): Source
  sources: [Source!]
  template(templateId: ID!): Template
  templates: [Template!]
}

type Resource {
  attributes(after: ID, before: ID, first: Int, last: Int, skip: Int): [Attribute!]!
  createdAt: DateTime!
  id: ID!
  label: String
  primaryKeyColumn: String
  primaryKeyOwner: String
  primaryKeyTable: String
  source: Source!
  updatedAt: DateTime!
}

input ResourceFilter {
  every: ResourceWhereInput
  none: ResourceWhereInput
  some: ResourceWhereInput
}

input ResourceWhereInput {
  AND: [ResourceWhereInput!]
  attributes: AttributeFilter
  createdAt: DateTimeFilter
  definition: StructureDefinitionWhereInput
  id: StringFilter
  label: NullableStringFilter
  NOT: [ResourceWhereInput!]
  OR: [ResourceWhereInput!]
  primaryKeyColumn: NullableStringFilter
  primaryKeyOwner: NullableStringFilter
  primaryKeyTable: NullableStringFilter
  source: SourceWhereInput
  updatedAt: DateTimeFilter
}

enum Role {
  ADMIN
  USER
}

type Source {
  createdAt: DateTime!
  credential: Credential
  hasOwner: Boolean!
  id: ID!
  mapping: String!
  mappingProgress: [Int!]
  name: String!
  resources(after: ID, before: ID, first: Int, last: Int, skip: Int, where: ResourceWhereInput): [Resource!]!
  template: Template!
  updatedAt: DateTime!
  version: String
}

input SourceFilter {
  every: SourceWhereInput
  none: SourceWhereInput
  some: SourceWhereInput
}

input SourceWhereInput {
  AND: [SourceWhereInput!]
  createdAt: DateTimeFilter
  credential: CredentialWhereInput
  hasOwner: BooleanFilter
  id: StringFilter
  name: StringFilter
  NOT: [SourceWhereInput!]
  OR: [SourceWhereInput!]
  resources: ResourceFilter
  template: TemplateWhereInput
  updatedAt: DateTimeFilter
  version: NullableStringFilter
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: String
  notIn: [String!]
  startsWith: String
}

type StructureDefinition {
  author: String!
  content: JSON!
  createdAt: DateTime!
  derivation: FhirDerivation
  description: String!
  id: String!
  kind: String!
  name: String!
  type: String!
  updatedAt: DateTime!
}

input StructureDefinitionWhereInput {
  AND: [StructureDefinitionWhereInput!]
  author: StringFilter
  content: StringFilter
  createdAt: DateTimeFilter
  derivation: FhirDerivation
  description: StringFilter
  id: StringFilter
  kind: StringFilter
  name: StringFilter
  NOT: [StructureDefinitionWhereInput!]
  OR: [StructureDefinitionWhereInput!]
  resources: ResourceFilter
  type: StringFilter
  updatedAt: DateTimeFilter
}

type Template {
  createdAt: DateTime!
  id: ID!
  name: String!
  sources(after: ID, before: ID, first: Int, last: Int, skip: Int): [Source!]!
  updatedAt: DateTime!
}

input TemplateWhereInput {
  AND: [TemplateWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  name: StringFilter
  NOT: [TemplateWhereInput!]
  OR: [TemplateWhereInput!]
  sources: SourceFilter
  updatedAt: DateTimeFilter
}

input UpdateAttributeInput {
  comments: String
  mergingScript: String
}

input UpdateInputInput {
  script: String
}

input UpdateResourceInput {
  label: String
  primaryKeyColumn: String
  primaryKeyOwner: String
  primaryKeyTable: String
}

type User {
  createdAt: DateTime!
  email: String!
  id: ID!
  name: String!
  role: Role!
  updatedAt: DateTime!
}
