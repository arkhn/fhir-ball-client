generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

///
model Template {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  sources   Source[]
}

model Source {
  id             String          @id @default(cuid())
  name           String
  templateId     String          @map("template")
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  version        String?
  template       Template        @relation(fields: [templateId], references: [id])
  accessControls AccessControl[]
  credential     Credential?
  resources      Resource[]

  @@unique([templateId, name], name: "Source_templateId_name")
}

model Credential {
  id        String       @id @default(cuid())
  host      String
  port      String
  database  String
  login     String
  password  String
  owners    Owner[]
  model     DatabaseType
  // Parent
  sourceId  String       @unique @map("source")
  source    Source       @relation(fields: [sourceId], references: [id])
  updatedAt DateTime     @updatedAt
  createdAt DateTime     @default(now())
}

model Owner {
  id           String     @id @default(cuid())
  name         String
  schema       Json?
  credentialId String     @map("credential")
  credential   Credential @relation(fields: [credentialId], references: [id])
  Column       Column[]

  @@unique([name, credentialId], name: "Owner_name_credential_unique_constraint")
}

model Resource {
  id               String      @id @default(cuid())
  sourceId         String      @map("source")
  createdAt        DateTime    @default(now())
  label            String?
  primaryKeyColumn String?
  primaryKeyTable  String?
  updatedAt        DateTime    @updatedAt
  definitionId     String
  logicalReference String      @default(uuid())
  source           Source      @relation(fields: [sourceId], references: [id])
  attributes       Attribute[]
  filters          Filter[]
}

model Filter {
  id          String    @id @default(cuid())
  relation    String
  resourceId  String?   @map("resource")
  sqlColumnId String    @unique @map("sqlColumn")
  value       String
  resource    Resource? @relation(fields: [resourceId], references: [id])
  sqlColumn   Column    @relation(fields: [sqlColumnId], references: [id])
}

model Attribute {
  id           String       @id @default(cuid())
  resourceId   String?      @map("resource")
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  path         String
  definitionId String
  sliceName    String?
  resource     Resource?    @relation(fields: [resourceId], references: [id])
  comments     Comment[]
  inputGroups  InputGroup[]
}

model Comment {
  attributeId String?    @map("attribute")
  authorId    String     @map("author")
  content     String
  createdAt   DateTime   @default(now())
  id          String     @id @default(cuid())
  updatedAt   DateTime   @updatedAt
  validation  Boolean    @default(false)
  attribute   Attribute? @relation(fields: [attributeId], references: [id])
  author      User       @relation(fields: [authorId], references: [id])
}

model InputGroup {
  id            String      @id @default(cuid())
  mergingScript String?
  attributeId   String?
  updatedAt     DateTime    @updatedAt
  createdAt     DateTime    @default(now())
  attribute     Attribute?  @relation(fields: [attributeId], references: [id])
  conditions    Condition[]
  inputs        Input[]
}

model Input {
  id           String      @id @default(cuid())
  createdAt    DateTime    @default(now())
  script       String?
  staticValue  String?
  updatedAt    DateTime    @updatedAt
  conceptMapId String?
  inputGroupId String?
  inputGroup   InputGroup? @relation(fields: [inputGroupId], references: [id])
  sqlValue     Column?
}

model Column {
  id     String  @id @default(cuid())
  column String?
  table  String?

  inputId String  @unique @map("input")
  input   Input   @relation(fields: [inputId], references: [id])
  ownerId String  @map("owner")
  owner   Owner   @relation(fields: [ownerId], references: [id])
  joinId  String? @map("join")
  join    Join?   @relation("JoinedColumns", fields: [joinId], references: [id])

  condition Condition?
  filter    Filter?
  joins     Join[]     @relation("ColumnJoins")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Join {
  id        String   @id @default(cuid())
  columnId  String?  @map("column")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  column    Column?  @relation("ColumnJoins", fields: [columnId], references: [id])
  tables    Column[] @relation("JoinedColumns")
}

model Condition {
  id           String            @id @default(cuid())
  action       ConditionAction?
  columnId     String?           @unique @map("column")
  value        String?
  inputGroupId String            @map("inputGroup")
  relation     ConditionRelation @default(EQ)
  sqlValue     Column?           @relation(fields: [columnId], references: [id])
  inputGroup   InputGroup        @relation(fields: [inputGroupId], references: [id])
}

model User {
  email         String          @unique
  id            String          @id @default(cuid())
  name          String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  role          Role            @default(USER)
  AccessControl AccessControl[]
  Comment       Comment[]
}

model AccessControl {
  id       String     @id @default(cuid())
  role     SourceRole
  sourceId String     @map("source")
  userId   String     @map("user")
  source   Source     @relation(fields: [sourceId], references: [id])
  user     User       @relation(fields: [userId], references: [id])

  @@unique([userId, sourceId], name: "AccessControl_user_source")
}

enum DatabaseType {
  POSTGRES
  ORACLE
  MSSQL
}

enum ConditionAction {
  INCLUDE
  EXCLUDE
}

enum ConditionRelation {
  EQ
  LT
  LE
  GE
  GT
  NULL
  NOTNULL
}

enum Role {
  ADMIN
  USER
}

enum SourceRole {
  READER
  WRITER
}
