generator photon {
  provider = "photonjs"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

// One per software (Chimio, Crossway, etc)
model Template {
  id      String   @default(cuid()) @id
  name    String   @unique
  sources Source[] @relation(onDelete: CASCADE)

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

model Source {
  id         String      @default(cuid()) @id
  name       String
  version    String?
  hasOwner   Boolean     @default(false)
  resources  Resource[]  @relation(onDelete: CASCADE)
  credential Credential? @relation(onDelete: CASCADE)
  template   Template

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

enum DatabaseType {
  POSTGRES ORACLE
}

model Credential {
  id       String       @default(cuid()) @id
  host     String
  port     String
  database String
  login    String
  password String
  model    DatabaseType
  // Parent
  source   Source

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

model Resource {
  id    String  @default(cuid()) @id
  label String?

  primaryKeyOwner  String?
  primaryKeyTable  String?
  primaryKeyColumn String?

  // filters on db to avoid processing all the DB
  filters Filter[]

  attributes   Attribute[] @relation(onDelete: CASCADE)
  definitionId String
  source       Source

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

model Filter {
  id String @default(cuid()) @id

  sqlColumn Column @relation(references: [id])
  relation  String
  value     String
}

model Attribute {
  id            String  @default(cuid()) @id
  path          String
  definitionId  String
  mergingScript String?
  comments      String?

  inputs   Input[]   @relation(onDelete: CASCADE)
  resource Resource?

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

model Input {
  id           String    @default(cuid()) @id
  // Sql column containing the value
  sqlValue     Column?   @relation(references: [id], onDelete: CASCADE)
  // cleaning scripts for the sql column
  script       String?
  // id of the concept map to be applied to a mapped code
  conceptMapId String?
  // Or a static value is it's fixed
  staticValue  String?
  // parent
  attribute    Attribute

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

model Column {
  id     String  @default(cuid()) @id
  owner  String?
  table  String?
  column String?

  joins Join[] @relation(name: "ColumnJoins", onDelete: CASCADE)

  filter Filter?
  input  Input?

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

model Join {
  id String @default(cuid()) @id

  tables Column[] @relation(name: "JoinedColumns", onDelete: CASCADE)

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

enum Role {
  ADMIN USER
}

model User {
  id       String @default(cuid()) @id
  email    String @unique
  name     String
  password String
  role     Role   @default(USER)

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

enum SourceRole {
  READER WRITER
}

model AccessControl {
  id String @default(cuid()) @id

  user   User
  source Source
  role   SourceRole
}