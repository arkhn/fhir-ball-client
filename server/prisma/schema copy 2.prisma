generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

enum DatabaseType {
  ORACLE
  POSTGRES
}

enum Role {
  ADMIN
  USER
}

enum SourceRole {
  READER
  WRITER
}

// One per software (Chimio, Crossway, etc)
model Template {
  id        String   @id
  name      String   @default("") @unique
  Source    Source[]
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

model Source {
  id            String          @id
  name          String          @default("")
  template      String
  Template      Template        @relation(fields: [template], references: [id])
  version       String?
  AccessControl AccessControl[]
  Credential    Credential?
  Resource      Resource[]
  updatedAt     DateTime        @updatedAt
  createdAt     DateTime        @default(now())

  @@unique([template, name], name: "Source.template_name")
}

model Credential {
  id        String       @id
  database  String
  host      String
  login     String
  model     DatabaseType
  password  String
  port      String
  source    String       @unique
  Source    Source       @relation(fields: [source], references: [id])
  updatedAt DateTime     @updatedAt
  createdAt DateTime     @default(now())
}

model Resource {
  id               String      @id
  definitionId     String      @default("")
  label            String?
  primaryKeyColumn String?
  primaryKeyOwner  String?
  primaryKeyTable  String?
  Filters          Filter[]
  Attributes       Attribute[]
  source           String
  Source           Source      @relation(fields: [source], references: [id])
  updatedAt        DateTime    @updatedAt
  createdAt        DateTime    @default(now())
}

model Filter {
  id        String    @id
  relation  String
  value     String
  sqlColumn String
  Column    Column    @relation(fields: [sqlColumn], references: [id])
  resource  String?
  Resource  Resource? @relation(fields: [resource], references: [id])
}

model Attribute {
  id            String    @id
  definitionId  String    @default("")
  path          String
  mergingScript String?
  sliceName     String?
  comments      Comment[]
  inputs        Input[]
  resource      String?
  Resource      Resource? @relation(fields: [resource], references: [id])
}

model Comment {
  id         String     @id
  content    String
  validation Boolean    @default(false)
  attribute  String?
  Attribute  Attribute? @relation(fields: [attribute], references: [id])
  author     String
  Author     User       @relation(fields: [author], references: [id])
  updatedAt  DateTime   @updatedAt
  createdAt  DateTime   @default(now())
}

model Input {
  id           String    @id
  conceptMapId String?
  script       String?
  staticValue  String?
  attribute    String
  Attribute    Attribute @relation(fields: [attribute], references: [id])
  sqlValue     String?
  SqlValue     Column?   @relation(fields: [sqlValue], references: [id])
  updatedAt    DateTime  @updatedAt
  createdAt    DateTime  @default(now())
}

model Column {
  id                     String   @id
  owner                  String?
  table                  String?
  column                 String?
  Filter                 Filter?
  Input                  Input?
  joins                  Join[]   @relation("ColumnToJoin_column")
  join                   String?
  Join_Column_joinToJoin Join?    @relation("Column_joinToJoin", fields: [join], references: [id])
  updatedAt              DateTime @updatedAt
  createdAt              DateTime @default(now())
}

model Join {
  id                         String   @id
  tables                     Column[] @relation("Column_joinToJoin")
  column                     String?
  Column_ColumnToJoin_column Column?  @relation("ColumnToJoin_column", fields: [column], references: [id])
  updatedAt                  DateTime @updatedAt
  createdAt                  DateTime @default(now())
}

model User {
  id            String          @id
  email         String          @unique
  name          String
  password      String
  role          Role            @default(USER)
  AccessControl AccessControl[]
  Comment       Comment[]
  updatedAt     DateTime        @updatedAt
  createdAt     DateTime        @default(now())
}

model AccessControl {
  id     String     @id
  role   SourceRole
  source String
  Source Source     @relation(fields: [source], references: [id])
  user   String
  User   User       @relation(fields: [user], references: [id])

  @@unique([user, source], name: "AccessControl.user_source")
}