### This file was autogenerated by GraphQL Nexus
### Do not make changes to this file directly


type Attribute {
  children(after: ID, before: ID, first: Int, last: Int, skip: Int): [Attribute!]!
  createdAt: DateTime!
  description: String
  fhirType: String!
  id: ID!
  inputs(after: ID, before: ID, first: Int, last: Int, skip: Int): [Input!]!
  isArray: Boolean!
  mergingScript: String
  name: String!
  parent: Attribute
  resource: Resource
  updatedAt: DateTime!
}

type AuthPayload {
  token: String!
  user: User!
}

type Column {
  column: String
  createdAt: DateTime!
  id: ID!
  joins(after: ID, before: ID, first: Int, last: Int, skip: Int): [Join!]!
  owner: String
  table: String
  updatedAt: DateTime!
}

input ColumnInput {
  column: String!
  joins: [JoinInput!]
  owner: String!
  table: String!
}

input ColumnInputWithoutJoins {
  column: String
  owner: String
  table: String
}

type Credential {
  createdAt: DateTime!
  database: String!
  host: String!
  id: ID!
  login: String!
  model: DatabaseType!
  password: String!
  port: String!
  source: Source!
  updatedAt: DateTime!
}

enum DatabaseType {
  POSTGRES
}

scalar DateTime

type Input {
  attribute: Attribute!
  createdAt: DateTime!
  id: ID!
  script: String
  sqlValue: Column
  staticValue: String
  updatedAt: DateTime!
}

type Join {
  createdAt: DateTime!
  id: ID!
  tables(after: ID, before: ID, first: Int, last: Int, skip: Int): [Column!]!
  updatedAt: DateTime!
}

input JoinInput {
  source: ColumnInputWithoutJoins
  target: ColumnInputWithoutJoins
}

type Mutation {
  addJoinToColumn(columnId: ID!, join: JoinInput): Column!
  createAttribute(parentId: ID!): Attribute!
  createInput(attributeId: ID!, script: String, sql: ColumnInput, static: String): Input!
  createResource(resourceName: String!, sourceId: ID!): Resource!
  createSource(hasOwner: Boolean!, name: String!, templateName: String!): Source!
  createTemplate(name: String!): Template!
  deleteAttribute(id: ID!): Attribute!
  deleteCredential(id: ID!): Credential!
  deleteInput(id: ID!): Input!
  deleteJoin(id: ID!): Join!
  deleteResource(id: ID!): Resource!
  deleteSource(id: ID!): Source!
  deleteTemplate(id: ID!): Template!
  login(email: String!, password: String!): AuthPayload!
  signup(email: String!, name: String!, password: String!): AuthPayload!
  updateAttribute(attributeId: ID!, data: UpdateAttributeInput!): Attribute!
  updateJoin(data: JoinInput!, joinId: ID!): Join!
  updateResource(data: UpdateResourceInput!, resourceId: ID!): Resource!
  upsertCredential(database: String!, host: String!, login: String!, model: String!, password: String!, port: String!, sourceId: ID!): Credential!
}

type Query {
  attribute(attributeId: ID!): Attribute
  me: User
  resource(resourceId: ID!): Resource
  source(sourceId: ID!): Source
  sources: [Source!]
  template(templateId: ID!): Template
  templates: [Template!]
}

type Resource {
  attributes(after: ID, before: ID, first: Int, last: Int, skip: Int): [Attribute!]!
  createdAt: DateTime!
  fhirType: String!
  id: ID!
  label: String
  primaryKeyColumn: String
  primaryKeyOwner: String
  primaryKeyTable: String
  profile: String
  source: Source!
  updatedAt: DateTime!
}

enum Role {
  ADMIN
  USER
}

type Source {
  createdAt: DateTime!
  credential: Credential
  hasOwner: Boolean!
  id: ID!
  mappingProgress: [Int!]
  name: String!
  resources(after: ID, before: ID, first: Int, last: Int, skip: Int): [Resource!]!
  template: Template!
  updatedAt: DateTime!
  version: String
}

type Template {
  createdAt: DateTime!
  id: ID!
  name: String!
  sources(after: ID, before: ID, first: Int, last: Int, skip: Int): [Source!]!
  updatedAt: DateTime!
}

input UpdateAttributeInput {
  description: String
  mergingScript: String
}

input UpdateResourceInput {
  label: String!
}

type User {
  createdAt: DateTime!
  email: String!
  id: ID!
  name: String!
  role: Role!
  updatedAt: DateTime!
}
