### This file was autogenerated by GraphQL Nexus
### Do not make changes to this file directly

type Attribute {
  attribute: Attribute
  attributes(
    after: ID
    before: ID
    first: Int
    last: Int
    skip: Int
  ): [Attribute!]!
  comment: String
  createdAt: DateTime!
  depth: Int
  id: ID!
  inputColumns(
    after: ID
    before: ID
    first: Int
    last: Int
    skip: Int
  ): [InputColumn!]!
  isProfile: Boolean
  mergingScript: String
  model: String
  name: String!
  resource: Resource
  updatedAt: DateTime!
}

type AuthPayload {
  token: String!
  user: User!
}

type Credential {
  database: String!
  host: String!
  id: ID!
  login: String!
  model: DatabaseType!
  password: String!
  port: String!
  source: Source!
}

enum DatabaseType {
  POSTGRES
}

scalar DateTime

type InputColumn {
  attribute: Attribute!
  column: String!
  createdAt: DateTime!
  id: ID!
  joins(after: ID, before: ID, first: Int, last: Int, skip: Int): [Join!]!
  owner: String!
  script: String!
  staticValue: String!
  table: String!
  updatedAt: DateTime!
}

type Join {
  createdAt: DateTime!
  id: ID!
  inputColumn: InputColumn!
  sourceColumn: String!
  sourceOwner: String!
  sourceTable: String!
  targetColumn: String!
  targetOwner: String!
  targetTable: String!
  updatedAt: DateTime!
}

type Mutation {
  createResource(resourceName: String!, sourceId: ID!): Resource!
  createSource(hasOwner: Boolean!, name: String!): Source!
  deleteResource(resourceId: ID!): Resource!
  deleteSource(name: String!): Source!
  login(email: String!, password: String!): AuthPayload!
  signup(email: String!, name: String!, password: String!): AuthPayload!
}

type Query {
  attribute(attributeId: ID!): Attribute
  me: User
  resource(resourceId: ID!): Resource
  source(sourceId: ID!): Source
  sources: [Source!]
}

type Resource {
  attributes(
    after: ID
    before: ID
    first: Int
    last: Int
    skip: Int
  ): [Attribute!]!
  createdAt: DateTime!
  fhirType: String!
  id: ID!
  label: String
  primaryKeyColumn: String
  primaryKeyOwner: String
  primaryKeyTable: String
  source: Source!
  updatedAt: DateTime!
}

enum Role {
  ADMIN
  USER
}

type Source {
  createdAt: DateTime!
  credential: Credential
  hasOwner: Boolean!
  id: ID!
  mappingProgress: [Int!]
  name: String!
  resources(
    after: ID
    before: ID
    first: Int
    last: Int
    skip: Int
  ): [Resource!]!
  updatedAt: DateTime!
}

type User {
  createdAt: DateTime!
  credentials(
    after: ID
    before: ID
    first: Int
    last: Int
    skip: Int
  ): [Credential!]!
  email: String!
  id: ID!
  name: String!
  password: String!
  role: Role!
  updatedAt: DateTime!
}
